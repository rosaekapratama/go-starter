// Code generated by mockery v2.33.3. DO NOT EDIT.

package config

import (
	config "github.com/rosaekapratama/go-starter/config"
	mock "github.com/stretchr/testify/mock"
)

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// GetBool provides a mock function with given fields: key
func (_m *MockConfig) GetBool(key string) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockConfig_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetBool(key interface{}) *MockConfig_GetBool_Call {
	return &MockConfig_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockConfig_GetBool_Call) Run(run func(key string)) *MockConfig_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetBool_Call) Return(_a0 bool, _a1 error) *MockConfig_GetBool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetBool_Call) RunAndReturn(run func(string) (bool, error)) *MockConfig_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockConfig) GetInt(key string) (int, error) {
	ret := _m.Called(key)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockConfig_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetInt(key interface{}) *MockConfig_GetInt_Call {
	return &MockConfig_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockConfig_GetInt_Call) Run(run func(key string)) *MockConfig_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetInt_Call) Return(_a0 int, _a1 error) *MockConfig_GetInt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetInt_Call) RunAndReturn(run func(string) (int, error)) *MockConfig_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields:
func (_m *MockConfig) GetObject() *config.Object {
	ret := _m.Called()

	var r0 *config.Object
	if rf, ok := ret.Get(0).(func() *config.Object); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Object)
		}
	}

	return r0
}

// MockConfig_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockConfig_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetObject() *MockConfig_GetObject_Call {
	return &MockConfig_GetObject_Call{Call: _e.mock.On("GetObject")}
}

func (_c *MockConfig_GetObject_Call) Run(run func()) *MockConfig_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetObject_Call) Return(_a0 *config.Object) *MockConfig_GetObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetObject_Call) RunAndReturn(run func() *config.Object) *MockConfig_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetRaw provides a mock function with given fields:
func (_m *MockConfig) GetRaw() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaw'
type MockConfig_GetRaw_Call struct {
	*mock.Call
}

// GetRaw is a helper method to define mock.On call
func (_e *MockConfig_Expecter) GetRaw() *MockConfig_GetRaw_Call {
	return &MockConfig_GetRaw_Call{Call: _e.mock.On("GetRaw")}
}

func (_c *MockConfig_GetRaw_Call) Run(run func()) *MockConfig_GetRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_GetRaw_Call) Return(bytes []byte, err error) *MockConfig_GetRaw_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockConfig_GetRaw_Call) RunAndReturn(run func() ([]byte, error)) *MockConfig_GetRaw_Call {
	_c.Call.Return(run)
	return _c
}

// GetSlice provides a mock function with given fields: key
func (_m *MockConfig) GetSlice(key string) ([]interface{}, error) {
	ret := _m.Called(key)

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]interface{}, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSlice'
type MockConfig_GetSlice_Call struct {
	*mock.Call
}

// GetSlice is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetSlice(key interface{}) *MockConfig_GetSlice_Call {
	return &MockConfig_GetSlice_Call{Call: _e.mock.On("GetSlice", key)}
}

func (_c *MockConfig_GetSlice_Call) Run(run func(key string)) *MockConfig_GetSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetSlice_Call) Return(_a0 []interface{}, _a1 error) *MockConfig_GetSlice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetSlice_Call) RunAndReturn(run func(string) ([]interface{}, error)) *MockConfig_GetSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockConfig) GetString(key string) (string, error) {
	ret := _m.Called(key)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfig_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockConfig_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetString(key interface{}) *MockConfig_GetString_Call {
	return &MockConfig_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockConfig_GetString_Call) Run(run func(key string)) *MockConfig_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetString_Call) Return(_a0 string, _a1 error) *MockConfig_GetString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfig_GetString_Call) RunAndReturn(run func(string) (string, error)) *MockConfig_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringAndThrowFatalIfEmpty provides a mock function with given fields: key
func (_m *MockConfig) GetStringAndThrowFatalIfEmpty(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_GetStringAndThrowFatalIfEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringAndThrowFatalIfEmpty'
type MockConfig_GetStringAndThrowFatalIfEmpty_Call struct {
	*mock.Call
}

// GetStringAndThrowFatalIfEmpty is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetStringAndThrowFatalIfEmpty(key interface{}) *MockConfig_GetStringAndThrowFatalIfEmpty_Call {
	return &MockConfig_GetStringAndThrowFatalIfEmpty_Call{Call: _e.mock.On("GetStringAndThrowFatalIfEmpty", key)}
}

func (_c *MockConfig_GetStringAndThrowFatalIfEmpty_Call) Run(run func(key string)) *MockConfig_GetStringAndThrowFatalIfEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetStringAndThrowFatalIfEmpty_Call) Return(_a0 string) *MockConfig_GetStringAndThrowFatalIfEmpty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetStringAndThrowFatalIfEmpty_Call) RunAndReturn(run func(string) string) *MockConfig_GetStringAndThrowFatalIfEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
