// Code generated by mockery v2.33.3. DO NOT EDIT.

package scheduler

import (
	context "context"

	cloudscheduler "google.golang.org/api/cloudscheduler/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// GetJobList provides a mock function with given fields: ctx
func (_m *MockIService) GetJobList(ctx context.Context) ([]*cloudscheduler.Job, error) {
	ret := _m.Called(ctx)

	var r0 []*cloudscheduler.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*cloudscheduler.Job, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*cloudscheduler.Job); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cloudscheduler.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_GetJobList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobList'
type MockIService_GetJobList_Call struct {
	*mock.Call
}

// GetJobList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIService_Expecter) GetJobList(ctx interface{}) *MockIService_GetJobList_Call {
	return &MockIService_GetJobList_Call{Call: _e.mock.On("GetJobList", ctx)}
}

func (_c *MockIService_GetJobList_Call) Run(run func(ctx context.Context)) *MockIService_GetJobList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIService_GetJobList_Call) Return(_a0 []*cloudscheduler.Job, _a1 error) *MockIService_GetJobList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_GetJobList_Call) RunAndReturn(run func(context.Context) ([]*cloudscheduler.Job, error)) *MockIService_GetJobList_Call {
	_c.Call.Return(run)
	return _c
}

// GetJobListInLocation provides a mock function with given fields: ctx, location
func (_m *MockIService) GetJobListInLocation(ctx context.Context, location string) ([]*cloudscheduler.Job, error) {
	ret := _m.Called(ctx, location)

	var r0 []*cloudscheduler.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*cloudscheduler.Job, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*cloudscheduler.Job); ok {
		r0 = rf(ctx, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cloudscheduler.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_GetJobListInLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJobListInLocation'
type MockIService_GetJobListInLocation_Call struct {
	*mock.Call
}

// GetJobListInLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - location string
func (_e *MockIService_Expecter) GetJobListInLocation(ctx interface{}, location interface{}) *MockIService_GetJobListInLocation_Call {
	return &MockIService_GetJobListInLocation_Call{Call: _e.mock.On("GetJobListInLocation", ctx, location)}
}

func (_c *MockIService_GetJobListInLocation_Call) Run(run func(ctx context.Context, location string)) *MockIService_GetJobListInLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIService_GetJobListInLocation_Call) Return(_a0 []*cloudscheduler.Job, _a1 error) *MockIService_GetJobListInLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_GetJobListInLocation_Call) RunAndReturn(run func(context.Context, string) ([]*cloudscheduler.Job, error)) *MockIService_GetJobListInLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
