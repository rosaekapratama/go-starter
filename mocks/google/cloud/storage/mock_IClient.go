// Code generated by mockery v2.33.3. DO NOT EDIT.

package storage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	storage "cloud.google.com/go/storage"
)

// MockIClient is an autogenerated mock type for the IClient type
type MockIClient struct {
	mock.Mock
}

type MockIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIClient) EXPECT() *MockIClient_Expecter {
	return &MockIClient_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: ctx, bucketName, path
func (_m *MockIClient) Download(ctx context.Context, bucketName string, path string) (*storage.ObjectHandle, io.Reader, error) {
	ret := _m.Called(ctx, bucketName, path)

	var r0 *storage.ObjectHandle
	var r1 io.Reader
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*storage.ObjectHandle, io.Reader, error)); ok {
		return rf(ctx, bucketName, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *storage.ObjectHandle); ok {
		r0 = rf(ctx, bucketName, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) io.Reader); ok {
		r1 = rf(ctx, bucketName, path)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, bucketName, path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIClient_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockIClient_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - path string
func (_e *MockIClient_Expecter) Download(ctx interface{}, bucketName interface{}, path interface{}) *MockIClient_Download_Call {
	return &MockIClient_Download_Call{Call: _e.mock.On("Download", ctx, bucketName, path)}
}

func (_c *MockIClient_Download_Call) Run(run func(ctx context.Context, bucketName string, path string)) *MockIClient_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIClient_Download_Call) Return(obj *storage.ObjectHandle, src io.Reader, err error) *MockIClient_Download_Call {
	_c.Call.Return(obj, src, err)
	return _c
}

func (_c *MockIClient_Download_Call) RunAndReturn(run func(context.Context, string, string) (*storage.ObjectHandle, io.Reader, error)) *MockIClient_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, bucketName, filePath, fileType, src
func (_m *MockIClient) Upload(ctx context.Context, bucketName string, filePath string, fileType *string, src []byte) (int, error) {
	ret := _m.Called(ctx, bucketName, filePath, fileType, src)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string, []byte) (int, error)); ok {
		return rf(ctx, bucketName, filePath, fileType, src)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string, []byte) int); ok {
		r0 = rf(ctx, bucketName, filePath, fileType, src)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *string, []byte) error); ok {
		r1 = rf(ctx, bucketName, filePath, fileType, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIClient_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockIClient_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - filePath string
//   - fileType *string
//   - src []byte
func (_e *MockIClient_Expecter) Upload(ctx interface{}, bucketName interface{}, filePath interface{}, fileType interface{}, src interface{}) *MockIClient_Upload_Call {
	return &MockIClient_Upload_Call{Call: _e.mock.On("Upload", ctx, bucketName, filePath, fileType, src)}
}

func (_c *MockIClient_Upload_Call) Run(run func(ctx context.Context, bucketName string, filePath string, fileType *string, src []byte)) *MockIClient_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*string), args[4].([]byte))
	})
	return _c
}

func (_c *MockIClient_Upload_Call) Return(written int, err error) *MockIClient_Upload_Call {
	_c.Call.Return(written, err)
	return _c
}

func (_c *MockIClient_Upload_Call) RunAndReturn(run func(context.Context, string, string, *string, []byte) (int, error)) *MockIClient_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIClient creates a new instance of MockIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClient {
	mock := &MockIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
