// Code generated by mockery v2.46.3. DO NOT EDIT.

package grpcclient

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockIManager is an autogenerated mock type for the IManager type
type MockIManager struct {
	mock.Mock
}

type MockIManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIManager) EXPECT() *MockIManager_Expecter {
	return &MockIManager_Expecter{mock: &_m.Mock}
}

// GetConn provides a mock function with given fields: ctx, connId
func (_m *MockIManager) GetConn(ctx context.Context, connId string) (*grpc.ClientConn, error) {
	ret := _m.Called(ctx, connId)

	if len(ret) == 0 {
		panic("no return value specified for GetConn")
	}

	var r0 *grpc.ClientConn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*grpc.ClientConn, error)); ok {
		return rf(ctx, connId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *grpc.ClientConn); ok {
		r0 = rf(ctx, connId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, connId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIManager_GetConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConn'
type MockIManager_GetConn_Call struct {
	*mock.Call
}

// GetConn is a helper method to define mock.On call
//   - ctx context.Context
//   - connId string
func (_e *MockIManager_Expecter) GetConn(ctx interface{}, connId interface{}) *MockIManager_GetConn_Call {
	return &MockIManager_GetConn_Call{Call: _e.mock.On("GetConn", ctx, connId)}
}

func (_c *MockIManager_GetConn_Call) Run(run func(ctx context.Context, connId string)) *MockIManager_GetConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIManager_GetConn_Call) Return(conn *grpc.ClientConn, err error) *MockIManager_GetConn_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockIManager_GetConn_Call) RunAndReturn(run func(context.Context, string) (*grpc.ClientConn, error)) *MockIManager_GetConn_Call {
	_c.Call.Return(run)
	return _c
}

// initConn provides a mock function with given fields: ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit, opts
func (_m *MockIManager) initConn(ctx context.Context, connId string, address string, stdoutLogging bool, databaseLogging string, payloadLogSizeLimit uint64, opts ...grpc.DialOption) (*grpc.ClientConn, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for initConn")
	}

	var r0 *grpc.ClientConn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, string, uint64, ...grpc.DialOption) (*grpc.ClientConn, error)); ok {
		return rf(ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, string, uint64, ...grpc.DialOption) *grpc.ClientConn); ok {
		r0 = rf(ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, string, uint64, ...grpc.DialOption) error); ok {
		r1 = rf(ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIManager_initConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'initConn'
type MockIManager_initConn_Call struct {
	*mock.Call
}

// initConn is a helper method to define mock.On call
//   - ctx context.Context
//   - connId string
//   - address string
//   - stdoutLogging bool
//   - databaseLogging string
//   - payloadLogSizeLimit uint64
//   - opts ...grpc.DialOption
func (_e *MockIManager_Expecter) initConn(ctx interface{}, connId interface{}, address interface{}, stdoutLogging interface{}, databaseLogging interface{}, payloadLogSizeLimit interface{}, opts ...interface{}) *MockIManager_initConn_Call {
	return &MockIManager_initConn_Call{Call: _e.mock.On("initConn",
		append([]interface{}{ctx, connId, address, stdoutLogging, databaseLogging, payloadLogSizeLimit}, opts...)...)}
}

func (_c *MockIManager_initConn_Call) Run(run func(ctx context.Context, connId string, address string, stdoutLogging bool, databaseLogging string, payloadLogSizeLimit uint64, opts ...grpc.DialOption)) *MockIManager_initConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.DialOption, len(args)-6)
		for i, a := range args[6:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.DialOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(string), args[5].(uint64), variadicArgs...)
	})
	return _c
}

func (_c *MockIManager_initConn_Call) Return(conn *grpc.ClientConn, err error) *MockIManager_initConn_Call {
	_c.Call.Return(conn, err)
	return _c
}

func (_c *MockIManager_initConn_Call) RunAndReturn(run func(context.Context, string, string, bool, string, uint64, ...grpc.DialOption) (*grpc.ClientConn, error)) *MockIManager_initConn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIManager creates a new instance of MockIManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIManager {
	mock := &MockIManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
