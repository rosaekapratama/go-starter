// Code generated by mockery v2.33.3. DO NOT EDIT.

package redis

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redislock "github.com/bsm/redislock"

	time "time"
)

// MockILock is an autogenerated mock type for the ILock type
type MockILock struct {
	mock.Mock
}

type MockILock_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILock) EXPECT() *MockILock_Expecter {
	return &MockILock_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with given fields:
func (_m *MockILock) Key() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockILock_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockILock_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockILock_Expecter) Key() *MockILock_Key_Call {
	return &MockILock_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockILock_Key_Call) Run(run func()) *MockILock_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILock_Key_Call) Return(_a0 string) *MockILock_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILock_Key_Call) RunAndReturn(run func() string) *MockILock_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function with given fields:
func (_m *MockILock) Metadata() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockILock_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type MockILock_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *MockILock_Expecter) Metadata() *MockILock_Metadata_Call {
	return &MockILock_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *MockILock_Metadata_Call) Run(run func()) *MockILock_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILock_Metadata_Call) Return(_a0 string) *MockILock_Metadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILock_Metadata_Call) RunAndReturn(run func() string) *MockILock_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, ttl, opt
func (_m *MockILock) Refresh(ctx context.Context, ttl time.Duration, opt *redislock.Options) error {
	ret := _m.Called(ctx, ttl, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, *redislock.Options) error); ok {
		r0 = rf(ctx, ttl, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockILock_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockILock_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - ttl time.Duration
//   - opt *redislock.Options
func (_e *MockILock_Expecter) Refresh(ctx interface{}, ttl interface{}, opt interface{}) *MockILock_Refresh_Call {
	return &MockILock_Refresh_Call{Call: _e.mock.On("Refresh", ctx, ttl, opt)}
}

func (_c *MockILock_Refresh_Call) Run(run func(ctx context.Context, ttl time.Duration, opt *redislock.Options)) *MockILock_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(*redislock.Options))
	})
	return _c
}

func (_c *MockILock_Refresh_Call) Return(_a0 error) *MockILock_Refresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILock_Refresh_Call) RunAndReturn(run func(context.Context, time.Duration, *redislock.Options) error) *MockILock_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: ctx
func (_m *MockILock) Release(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockILock_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockILock_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockILock_Expecter) Release(ctx interface{}) *MockILock_Release_Call {
	return &MockILock_Release_Call{Call: _e.mock.On("Release", ctx)}
}

func (_c *MockILock_Release_Call) Run(run func(ctx context.Context)) *MockILock_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockILock_Release_Call) Return(_a0 error) *MockILock_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILock_Release_Call) RunAndReturn(run func(context.Context) error) *MockILock_Release_Call {
	_c.Call.Return(run)
	return _c
}

// TTL provides a mock function with given fields: ctx
func (_m *MockILock) TTL(ctx context.Context) (time.Duration, error) {
	ret := _m.Called(ctx)

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Duration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Duration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockILock_TTL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TTL'
type MockILock_TTL_Call struct {
	*mock.Call
}

// TTL is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockILock_Expecter) TTL(ctx interface{}) *MockILock_TTL_Call {
	return &MockILock_TTL_Call{Call: _e.mock.On("TTL", ctx)}
}

func (_c *MockILock_TTL_Call) Run(run func(ctx context.Context)) *MockILock_TTL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockILock_TTL_Call) Return(_a0 time.Duration, _a1 error) *MockILock_TTL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockILock_TTL_Call) RunAndReturn(run func(context.Context) (time.Duration, error)) *MockILock_TTL_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function with given fields:
func (_m *MockILock) Token() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockILock_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockILock_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *MockILock_Expecter) Token() *MockILock_Token_Call {
	return &MockILock_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *MockILock_Token_Call) Run(run func()) *MockILock_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILock_Token_Call) Return(_a0 string) *MockILock_Token_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILock_Token_Call) RunAndReturn(run func() string) *MockILock_Token_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockILock creates a new instance of MockILock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILock {
	mock := &MockILock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
