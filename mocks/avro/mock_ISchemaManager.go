// Code generated by mockery v2.46.3. DO NOT EDIT.

package avro

import (
	context "context"

	avro "github.com/hamba/avro/v2"

	mock "github.com/stretchr/testify/mock"
)

// MockISchemaManager is an autogenerated mock type for the ISchemaManager type
type MockISchemaManager struct {
	mock.Mock
}

type MockISchemaManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISchemaManager) EXPECT() *MockISchemaManager_Expecter {
	return &MockISchemaManager_Expecter{mock: &_m.Mock}
}

// GetSchema provides a mock function with given fields: ctx, name
func (_m *MockISchemaManager) GetSchema(ctx context.Context, name string) (avro.Schema, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 avro.Schema
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (avro.Schema, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) avro.Schema); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(avro.Schema)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockISchemaManager_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockISchemaManager_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockISchemaManager_Expecter) GetSchema(ctx interface{}, name interface{}) *MockISchemaManager_GetSchema_Call {
	return &MockISchemaManager_GetSchema_Call{Call: _e.mock.On("GetSchema", ctx, name)}
}

func (_c *MockISchemaManager_GetSchema_Call) Run(run func(ctx context.Context, name string)) *MockISchemaManager_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockISchemaManager_GetSchema_Call) Return(_a0 avro.Schema, _a1 error) *MockISchemaManager_GetSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockISchemaManager_GetSchema_Call) RunAndReturn(run func(context.Context, string) (avro.Schema, error)) *MockISchemaManager_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSchema provides a mock function with given fields: ctx, name, avscPath
func (_m *MockISchemaManager) RegisterSchema(ctx context.Context, name string, avscPath string) error {
	ret := _m.Called(ctx, name, avscPath)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSchema")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, avscPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockISchemaManager_RegisterSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSchema'
type MockISchemaManager_RegisterSchema_Call struct {
	*mock.Call
}

// RegisterSchema is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - avscPath string
func (_e *MockISchemaManager_Expecter) RegisterSchema(ctx interface{}, name interface{}, avscPath interface{}) *MockISchemaManager_RegisterSchema_Call {
	return &MockISchemaManager_RegisterSchema_Call{Call: _e.mock.On("RegisterSchema", ctx, name, avscPath)}
}

func (_c *MockISchemaManager_RegisterSchema_Call) Run(run func(ctx context.Context, name string, avscPath string)) *MockISchemaManager_RegisterSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockISchemaManager_RegisterSchema_Call) Return(_a0 error) *MockISchemaManager_RegisterSchema_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockISchemaManager_RegisterSchema_Call) RunAndReturn(run func(context.Context, string, string) error) *MockISchemaManager_RegisterSchema_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockISchemaManager creates a new instance of MockISchemaManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISchemaManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISchemaManager {
	mock := &MockISchemaManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
